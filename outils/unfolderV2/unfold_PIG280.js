const jscad = require('@jscad/modeling')
const { line, polygon, rectangle, circle } = jscad.primitives
const { measureBoundingBox, measureCenterOfMass } = jscad.measurements
const { translate, translateX, scale, center, align } = jscad.transforms
const { colorize, colorNameToRgb } = jscad.colors
const { union } = jscad.booleans
const { path2 } = jscad.geometries

const cachedNum = [], cachedDig = [], cacheKO = [], lUNFOLD = []
  epsilon = 0.0001, frame = [210, 297]

const vol = {
//faces :[[6,46,8],[7,9,6],[7,17,9],[8,46,18],[9,31,20],[9,45,6],[13,36,35],[16,33,32],[16,34,33],[16,35,34],[17,31,9],[18,32,8],[18,40,32],[20,44,9],[20,49,44],[29,40,30],[29,41,40],[29,55,41],[30,40,18],[33,37,32],[35,36,34],[35,60,13],[43,49,29],[44,49,43],[45,46,6],[49,55,29],[0,23,12],[0,50,23],[5,37,8],[6,51,7],[7,51,17],[8,32,5],[17,51,24],[23,53,12],[23,54,53],[24,51,6],[32,37,5],[50,54,23],[0,12,1],[0,26,21],[1,26,0],[3,56,4],[3,58,56],[4,55,3],[4,57,55],[12,38,1],[12,53,38],[19,54,39],[21,22,0],[22,50,0],[22,54,50],[25,28,27],[25,57,28],[28,59,27],[38,53,19],[39,54,22],[41,57,25],[53,54,19],[55,57,41],[2,47,11],[3,42,10],[3,55,42],[10,58,3],[11,52,2],[14,47,15],[15,47,2],[16,40,27],[17,52,31],[24,52,17],[27,35,16],[27,40,25],[27,59,35],[31,52,11],[32,40,16],[40,41,25],[42,55,49],[48,58,10],[48,61,58],[59,60,35],[1,44,26],[1,45,9],[2,36,15],[2,52,33],[8,24,6],[8,37,24],[9,44,1],[10,31,11],[10,42,31],[11,48,10],[14,15,13],[14,48,47],[14,61,48],[15,36,13],[18,39,30],[18,46,19],[19,39,18],[19,45,38],[19,46,45],[21,29,22],[21,43,29],[26,43,21],[26,44,43],[29,30,22],[30,39,22],[31,42,20],[33,34,2],[33,52,37],[34,36,2],[37,52,24],[38,45,1],[42,49,20],[47,48,11],[13,60,14],[28,57,56],[56,57,4],[56,58,28],[58,59,28],[58,61,59],[59,61,60],[60,61,14]],
//vertices : [[2.18515314,-5.66906501,-10.77388586],[2.43210414,0.82779499,-10.30188186],[-0.29528786,6.25000799,5.47664414],[4.13009714,-3.01705901,0.69581914],[1.46449814,-11.05883601,1.48296114],[-4.20202986,11.74657899,-6.43274186],[1.76210314,9.44943799,-6.33619386],[3.19248914,8.52623199,-4.88176586],[-1.69497386,9.59488899,-6.39661086],[4.14186414,5.49562299,-7.26941186],[4.88347514,-1.36499801,3.64397014],[2.16482214,5.95683299,3.96508914],[1.84181014,-2.95060701,-14.17623386],[-1.25984886,-3.35124401,13.04639014],[1.10314414,-3.02590001,13.39368614],[0.047290145,-0.17638001,11.58252314],[-3.60132686,4.62640399,1.57291514],[2.73655714,8.41181199,-3.31748986],[-3.92215486,6.01013999,-7.92936786],[-1.59579286,4.76547699,-10.56344086],[3.58461014,3.87044599,-3.14977686],[0.38438314,-2.97141501,-7.31977486],[-1.80094486,-3.09396701,-8.84670486],[-0.79305486,-6.31723901,-12.98161186],[1.69175814,9.79957199,-4.17293186],[-4.07114686,-3.52512501,0.88831814],[2.43116114,-1.78938501,-8.77571186],[-4.94782986,-2.72556401,3.87805714],[-4.38850286,-9.47509201,4.26982414],[-0.33428886,-2.43236701,-4.60392386],[-3.66268086,-1.12694901,-5.73591086],[3.30817814,6.91763299,-2.09996286],[-3.30302786,7.95453699,-4.95989686],[-1.49345886,8.90576999,-0.33442386],[-1.91500986,6.27745099,3.90967314],[-4.33650886,-2.55702901,7.20820814],[-1.59560286,3.02654499,7.68190014],[-1.95584286,9.48761799,-3.58585986],[1.53664614,3.37955499,-10.80585686],[-2.56934586,0.95661999,-9.91045986],[-3.51885886,2.54441099,-2.16110486],[-1.57399686,-2.78087001,-1.74482786],[3.68439514,1.30763999,-1.31338186],[2.79857114,-2.18289301,-5.32179086],[3.74590714,0.27503999,-6.84499586],[2.92300714,5.71537799,-9.78312586],[0.37404214,8.71167199,-8.26816586],[1.25524414,2.44824599,8.69050614],[4.12591214,-1.94520301,7.06802914],[2.76914814,0.66925999,-2.95216986],[-1.19023086,-6.62480701,-10.39142486],[3.34262114,12.65198199,-7.36000086],[1.13191014,9.14929599,-0.64515886],[-0.0018628552,-3.30936801,-14.86011386],[-2.23563986,-3.10630801,-13.28313286],[0.50913914,-3.12659101,-2.25022586],[4.29845114,-9.14855201,4.07653214],[-1.47953986,-10.87022401,1.98925314],[5.45283414,-7.04318101,7.08779314],[-5.58808286,-7.64922001,7.05212814],[-3.81056786,-4.51207001,11.53466014],[3.77669014,-4.37932801,11.14128914]]
faces :[[0,100,35],[1,107,69],[2,138,43],[4,105,79],[4,110,105],[4,130,110],[7,55,4],[13,138,84],[15,91,36],[16,141,35],[19,96,73],[19,116,96],[20,122,39],[23,97,84],[23,122,24],[24,97,23],[31,133,41],[35,51,0],[35,141,51],[36,91,78],[39,122,23],[43,81,2],[55,98,4],[55,103,98],[56,91,15],[56,115,91],[56,125,115],[56,133,64],[56,140,133],[63,124,115],[64,96,56],[64,133,73],[69,104,20],[69,107,104],[73,96,64],[73,116,19],[73,125,116],[73,133,115],[79,105,81],[81,132,2],[84,97,13],[84,138,86],[86,108,84],[86,138,2],[93,141,16],[96,116,56],[98,103,1],[98,130,4],[103,107,1],[103,114,107],[104,122,20],[105,132,81],[106,122,104],[115,125,73],[115,133,63],[116,125,56],[133,140,41],[2,76,60],[2,89,86],[3,43,33],[3,95,5],[3,121,22],[4,79,7],[5,43,3],[5,95,92],[7,48,45],[7,79,48],[10,128,35],[12,95,22],[12,109,92],[14,134,27],[22,95,3],[22,109,12],[22,121,109],[24,101,97],[25,99,60],[25,118,89],[26,90,76],[26,118,90],[27,37,14],[27,134,28],[28,34,27],[28,87,34],[28,101,87],[28,134,101],[32,77,65],[32,127,77],[32,137,127],[33,40,3],[33,121,40],[34,37,27],[34,70,37],[34,87,70],[35,100,10],[35,120,16],[35,128,120],[37,70,49],[38,83,68],[40,121,3],[44,112,53],[45,55,7],[45,67,55],[46,128,117],[46,139,120],[47,131,100],[47,135,72],[47,139,131],[48,67,45],[48,71,67],[48,82,71],[49,87,24],[50,119,59],[50,123,119],[52,119,53],[53,83,44],[53,112,52],[53,123,68],[59,112,111],[59,119,112],[59,136,50],[60,89,2],[60,90,25],[60,99,89],[61,83,38],[61,111,83],[61,136,111],[65,114,32],[68,83,53],[68,94,38],[68,123,94],[70,87,49],[71,82,79],[74,108,88],[74,118,26],[76,90,60],[77,129,65],[79,82,48],[83,111,44],[87,101,24],[88,108,89],[88,118,74],[89,99,25],[89,108,86],[89,118,88],[90,118,25],[92,95,12],[97,134,14],[100,117,10],[100,131,117],[100,135,47],[101,134,97],[103,126,114],[107,114,65],[109,121,33],[111,112,44],[111,136,59],[112,119,52],[114,126,32],[117,128,10],[117,131,46],[119,123,53],[120,128,46],[126,137,32],[127,129,77],[127,137,126],[131,139,46],[0,113,100],[2,132,76],[5,81,43],[5,92,81],[8,72,58],[8,129,72],[9,66,37],[13,97,66],[15,108,74],[15,140,56],[17,75,51],[18,54,47],[18,127,6],[18,129,127],[21,84,36],[21,94,84],[23,50,39],[23,123,50],[24,106,49],[24,122,106],[26,76,42],[30,62,33],[33,43,30],[36,108,15],[37,49,9],[37,66,14],[39,136,20],[43,138,30],[47,129,18],[49,104,9],[49,106,104],[50,136,39],[51,75,0],[54,57,47],[57,139,47],[58,135,80],[62,109,33],[66,97,14],[71,79,62],[72,135,58],[74,102,15],[75,113,0],[76,105,42],[76,132,105],[79,85,62],[80,135,113],[81,85,79],[81,92,85],[84,108,36],[84,123,23],[85,109,62],[92,109,85],[94,123,84],[102,140,15],[113,135,100],[6,57,18],[6,139,57],[11,93,16],[11,120,6],[11,141,93],[16,120,11],[18,57,54],[36,78,21],[38,78,61],[38,94,78],[61,78,29],[72,129,47],[78,91,29],[78,94,21],[91,124,29],[115,124,91],[120,139,6],[1,63,31],[1,69,63],[6,67,11],[6,103,55],[6,126,103],[6,127,126],[8,58,9],[9,104,65],[9,129,8],[13,66,58],[17,71,62],[20,124,63],[20,136,29],[26,102,74],[29,124,20],[29,136,61],[30,75,62],[30,138,75],[31,98,1],[31,130,98],[41,130,31],[41,140,110],[42,102,26],[42,140,102],[51,67,17],[51,141,67],[55,67,6],[58,66,9],[58,80,13],[62,75,17],[63,69,20],[63,133,31],[65,129,9],[67,71,17],[67,141,11],[75,138,113],[80,138,13],[104,107,65],[105,110,42],[110,130,41],[110,140,42],[113,138,80]]
,vertices : [[5.609397,-1.298633,-18.927923],[-3.720003,14.67418,6.174614],[8.928428,-6.198798,3.793174],[6.942431,-14.192561,-5.465997],[7.000431,10.878401,-3.338076],[10.944188,-7.241835,-1.583798],[-0.125035,11.637695,-15.915726],[8.538305,11.344822,-6.937631],[-10.210627,1.22349,-14.337328],[-9.598031,0.245826,-9.47059],[2.580443,1.548028,-23.649151],[4.677823,8.01246,-16.735573],[11.675581,-14.208671,-7.623096],[-2.950236,-6.571522,-8.334146],[-7.373864,-6.663176,-6.328621],[5.558154,-0.155891,18.062101],[3.335128,5.936245,-17.96158],[10.265189,1.39252,-13.758273],[-6.502366,6.950797,-15.708973],[1.680831,12.131298,20.305563],[-12.832051,2.667188,10.94003],[-2.854543,-6.109907,13.36739],[10.188041,-14.061804,-9.852295],[-9.303308,-5.685041,3.809402],[-9.678704,-4.490749,-0.749349],[11.646338,-14.255619,9.36229],[13.008142,-5.563538,11.082602],[-7.709692,-13.979462,-10.002065],[-7.60677,-14.413021,-4.807336],[-11.132264,0.15579,15.796514],[5.999811,-4.935834,-7.414075],[-0.5675,13.691082,13.19976],[-12.334144,14.340898,-9.431635],[7.154678,-7.076002,-6.466119],[-10.213795,-14.05273,-9.89047],[4.197358,3.269598,-20.645319],[1.765591,-5.412931,15.181759],[-10.428717,-6.246423,-7.460515],[-6.555531,-6.225467,12.571115],[-11.910103,-0.795479,5.070032],[6.528587,-11.046203,-7.480795],[5.676651,10.799924,13.351552],[12.811476,2.380335,11.723708],[7.997217,-5.565742,-1.618413],[-10.16153,-14.358591,11.787127],[8.557441,14.746391,-10.675665],[-0.230791,6.458326,-24.888195],[-4.462083,3.600917,-20.429462],[12.292321,14.197223,-9.461156],[-13.210131,-7.099825,-4.520124],[-11.27635,-6.88171,4.799037],[9.072382,1.833877,-17.363159],[-9.14724,-14.259839,6.978436],[-6.5001,-14.42522,10.254289],[-4.134082,6.027592,-15.259595],[3.90926,13.379626,-9.876072],[1.166747,5.452767,18.511141],[-2.872474,6.432806,-18.07373],[-8.430169,-3.375967,-13.587246],[-10.214835,-10.78789,9.180211],[8.211078,-11.195595,8.180341],[-10.742946,-5.91071,13.264586],[9.451323,-0.927118,-9.729105],[-5.933548,11.706189,12.133539],[1.139941,7.808797,18.819035],[-9.17909,9.217894,-6.934328],[-7.668217,-3.360066,-9.258056],[6.684297,11.419771,-12.486712],[-5.532893,-10.894738,12.373943],[-8.738246,10.417489,5.545812],[-11.567144,-13.893033,-8.277349],[9.182015,6.227098,-11.475718],[-7.982641,1.114442,-18.939793],[0.745694,7.977006,21.124491],[8.723613,-5.963979,13.644497],[8.727929,-3.125666,-13.275502],[13.29493,-6.355398,6.442781],[-11.150698,9.14986,-10.247629],[-5.074628,-2.381694,16.475746],[8.769376,7.863834,-6.221869],[-2.020309,-6.392877,-14.338801],[11.498818,-1.895218,-1.488318],[11.111112,9.048364,-10.355749],[-7.307862,-11.143037,14.076135],[-3.16785,-8.396749,5.862935],[11.998341,-0.503871,-5.844678],[6.728031,-7.664389,6.221586],[-10.726323,-14.030268,-5.32542],[6.702936,-11.113652,13.948517],[6.036614,-13.254447,10.759086],[10.660589,-10.565172,9.46878],[-2.596126,0.434025,18.270657],[12.938746,-6.101297,-3.549901],[4.130087,5.989336,-15.181705],[-5.290142,-6.493765,9.991873],[9.623945,-13.860062,-4.327214],[2.845657,9.833663,19.402699],[-6.72908,-6.086613,-3.582083],[0.096486,15.999832,4.009908],[8.716694,-14.334607,6.992344],[-0.014287,0.35038,-23.082125],[-8.443373,-9.808251,-3.108349],[10.684971,0.181855,16.077019],[-1.243179,13.963823,-9.014662],[-9.185685,7.117472,-4.930676],[12.150253,3.61985,6.726511],[-12.623525,-2.131837,-3.845786],[-7.008047,10.992342,-3.360122],[5.258867,-6.327866,10.406639],[11.759183,-7.165586,-6.876211],[8.272418,11.075609,7.336069],[-10.109507,-10.933846,12.539444],[-11.292765,-14.233497,8.592602],[3.922757,-5.442194,-15.732204],[-7.730841,12.393808,-7.603943],[-2.463578,6.822707,18.133802],[3.389414,7.833766,21.06097],[-0.692951,2.485252,-23.958157],[8.58729,-13.590854,13.17488],[-7.918583,-10.9965,8.083338],[0.691908,5.594603,-20.58486],[7.817265,-14.001347,-10.024668],[-11.448492,-0.539993,-1.460356],[-6.957373,-7.375434,5.729953],[-10.171756,3.484542,15.980143],[0.448687,5.542937,21.558975],[-3.997155,13.310481,-10.121327],[-6.772736,11.336302,-12.57516],[2.480626,3.776763,-23.922609],[-9.249331,6.410146,-11.396958],[3.997039,14.470738,7.204198],[-2.975379,1.93131,-23.628263],[11.60143,-1.457672,4.912852],[0.091293,10.562816,16.852304],[-6.25513,-11.400013,-6.467363],[-3.608356,-3.444287,-18.409765],[-13.769928,-6.215314,8.129794],[-8.326097,14.617351,-10.811465],[1.610138,-7.054869,-7.722196],[-1.421981,5.498313,-20.212202],[9.58468,4.218798,15.867414],[6.551814,6.541125,-15.643254]]
}

const getParameterDefinitions = () => {
  return [
    { name: 'firstTriangle', type: 'int', initial: 0, caption: 'Start by' },
  ]
}

const main = (params) => {

//  const points = [ [10, 10, 0], [10, -10, 0], [-10, -10, 0], [-10, 10, 0], [0, 0, 10] ]
//  const faces = [ [0, 1, 4], [1, 2, 4], [2, 3, 4], [3, 0, 4], [1, 0, 3], [2, 1, 3] ]

// INITS
vol.voisins = getNeighbors(vol.faces)

g_s = 3, gSCALE = 0.05
vol.vertices = vol.vertices.map(v => [v[0]*g_s, v[1]*g_s, v[2]*g_s])

vol.v2d = []
for (var i = 0; i < vol.faces.length; i++){
  vol.v2d.push(create2dTriangleFromFace(vol.faces[i]))
}

var r = []  
// START UNFOLDING  

  // frame
  r.push(rectangle({center: [210/2, 297/2], size: [210, 297]})) 
  
  // center first triangle into frame
  vol.v2d[params.firstTriangle] = vol.v2d[params.firstTriangle]
    .map(v => [v[0]+210/2, v[1]+ 297/2])

  r.push(pose(params.firstTriangle)) // display first triangle

  var ok= true
  while(ok){
    var c = candidates()
    if(c.length > 0){
      if(attach(c[0][0], c[0][1])){
        ok = true
        r.push(pose(c[0][1]))
      }
    } else
      ok = false
   }
  
  return r
}

function candidates() {
 var r = []
 for(var i = 0; i < lUNFOLD.length; i++){
   nFace = lUNFOLD[i]
   for(var j = 0; j < 3; j++){
     var n = vol.voisins[nFace][j]
     if(!lUNFOLD.includes(n)){
       if(cacheKO.find(x => (x[0] === nFace) && (x[1] === n)) === undefined)
         r.push([nFace, n])
     }
   }
 }
 return r
}

function attach(nFace, nT){
  if(cacheKO.find(x => (x[0] === nFace) && (x[1] === nT)) !== undefined){
    return false
  }
  var nVP = vol.voisins[nT].findIndex(x => x === nFace)
  var ptV = vol.v2d[nT]
  var ptV0 = ptV[nVP]
  var ptV1 = ptV[suiv(nVP)]

  var nFP = vol.voisins[nFace].findIndex(x => x === nT)
  var ptF = vol.v2d[nFace]
  var ptF0 = ptF[nFP]
  var ptF1 = ptF[suiv(nFP)]
  
// put neighbor close
  var dx = ptF1[0] - ptV0[0], dy = ptF1[1] - ptV0[1]
  vol.v2d[nT] = vol.v2d[nT].map(v => [v[0] + dx, v[1] + dy])
      
  ptV = vol.v2d[nT]
  ptV0 = ptV[nVP]
  ptV1 = ptV[suiv(nVP)]
    
  // rotate neighbor
  let a = calcAngle(ptF0, ptF1, ptV1)
  let tmp = vol.v2d[nT]
    .map(x => rotation(ptF1[0], ptF1[1], x[0], x[1], a))
  ptV1 = tmp[suiv(nVP)]
  let delta = Math.abs(distance2d(ptF0, ptV1))
  if(delta > epsilon){
    ptV = ptV.map(x=> rotation(ptF1[0], ptF1[1], x[0], x[1], 360-a))
  }else
    ptV = tmp

  ptV0 = ptV[nVP]
  ptV1 = ptV[suiv(nVP)]
  
  // check for overlaps
  var ok = false
  for(var i = 0; i < lUNFOLD.length; i++){
    ok = !overlap(ptV, vol.v2d[lUNFOLD[i]])
    if (!ok){
      cacheKO.push([nFace, nT])
      return false
    }
  }
  
  
  vol.v2d[nT] = ptV
  return true
}

function overlap(t1, t2){
  let r = li(t1[0], t1[1], t2[0], t2[1])
    || li(t1[0], t1[1], t2[1], t2[2])
	|| li(t1[0], t1[1], t2[2], t2[0])
	|| li(t1[1], t1[2], t2[0], t2[1])
	|| li(t1[1], t1[2], t2[1], t2[2])
	|| li(t1[1], t1[2], t2[2], t2[0])
	|| li(t1[2], t1[0], t2[0], t2[1])
	|| li(t1[2], t1[0], t2[1], t2[2])
	|| li(t1[2], t1[0], t2[2], t2[0])
  return r
}

function li(l1S, l1E, l2S, l2E){// true if the lines intersect
	if(eq(l1S, l2S)||eq(l1S, l2E)||eq(l1E, l2S)||eq(l1E, l2E)){
	  return false
	}
		
	var denominator = ((l2E[1] - l2S[1]) * (l1E[0] - l1S[0])) 
	                - ((l2E[0] - l2S[0]) * (l1E[1] - l1S[1]))
  
  if(denominator === 0){
		return false
	}
  
  var a = l1S[1] - l2S[1]
  var b = l1S[0] - l2S[0]
  var numerator1 = ((l2E[0] - l2S[0]) * a) - ((l2E[1] - l2S[1]) * b)
  var numerator2 = ((l1E[0] - l1S[0]) * a) - ((l1E[1] - l1S[1]) * b)
  a = numerator1 / denominator;
  b = numerator2 / denominator;
  
  if((a > 0 && a < 1) && (b > 0 && b < 1)){
		return true
	}else{
		return false
	}
}

function eq(p1, p2){ return distance2d(p1,p2) < epsilon}

function suiv(n) { return n < 2 ? n+1 : 0}

function calcAngle(A,B,C) {
  var AB = Math.sqrt(Math.pow(B[0]-A[0],2)+ Math.pow(B[1]-A[1],2));    
  var BC = Math.sqrt(Math.pow(B[0]-C[0],2)+ Math.pow(B[1]-C[1],2)); 
  var AC = Math.sqrt(Math.pow(C[0]-A[0],2)+ Math.pow(C[1]-A[1],2));
    
  return Math.acos((BC*BC+AB*AB-AC*AC) / (2*BC*AB)) * (180 / Math.PI);   
}

function rotation(cx, cy, x, y, angle) {
  var radians = (Math.PI / 180) * angle,
      cos = Math.cos(radians),
      sin = Math.sin(radians)
  return [(cos * (x - cx)) + (sin * (y - cy)) + cx,
	      (cos * (y - cy)) - (sin * (x - cx)) + cy]
}

function distance2d(p1, p2){
  var a = p2[0] - p1[0]
  var b = p2[1] - p1[1]
  return Math.sqrt(a*a + b*b)
}

function pose(n){
  var r = []
  var pts = vol.v2d[n]
  
  lUNFOLD.push(n)
  r.push(colorize([1,0,0], line([pts[0], pts[1]])))
  r.push(colorize([1,0,0], line([pts[1], pts[2]])))
  r.push(colorize([1,0,0], line([pts[2], pts[0]])))
  
  var c = centroid(pts)
  r.push(colorize([0,0,1], number(n, gSCALE, c[0], c[1])))
 
  for(var i = 0; i < 3; i++){
    var m = milieu(pts[i], pts[i < 2 ? i+1 : 0])
    r.push(colorize([0,1,0], 
      number(vol.voisins[n][i], gSCALE*0.6, m[0], m[1])))  
  }
  
  console.log(n,lUNFOLD.length, '/', vol.faces.length)
  
  return r
}

function centroid(pts){
  var a = pts[0], b = pts[1], c = pts[2] 
  return [((a[0] + b[0] + c[0]) / 3), ((a[1] + b[1] + c[1]) / 3)]
}

function milieu(a, b){
  return [((a[0] + b[0]) / 2), ((a[1] + b[1]) / 2)]
}

function number(n, s = 1, x=0, y=0){
 var ch = n.toString().split("").map(Number)
 var r = [] 
 var dkX = 0
 for(var i = 0; i < ch.length; i++){   
   var nl = line(digit(ch[i], s).map(v => [v[0]+dkX+x-(12/2*s)*ch.length, v[1]+y-15/2*s]))
   //r.push(translateX(dkX, nl))
   r.push(nl)
   var b = measureBoundingBox(nl)
   dkX += b[1][0] - b[0][0] + 4 * s
 }
 return r
}

function getNeighbors (f){
  let V = []
  for(let i= 0; i< f.length; i++){
    V[i] = []
    for(let j= 0; j<3; j++){
      let p1 = f[i][j], p2 = f[i][j==2 ? 0: j+1]
      let v = f.findIndex(function(el, idx){
  	    return (idx !== i) && el.includes(p1) && el.includes(p2)})
	  V[i].push(v)
    }
  }
  return V
}

function create2dTriangleFromFace (face){
  let pts3d = extractFacesVertices(face)
  let pts2d = d2ize(pts3d)
  return pts2d
}
  
function extractFacesVertices (f) {
 return f.map(x=> vol.vertices[x])
}

function d2ize(p){
// https://stackoverflow.com/a/8051489
var x0 = p[0][0], y0 = p[0][1], z0 = p[0][2],
    x1 = p[1][0], y1 = p[1][1], z1 = p[1][2],
    x2 = p[2][0], y2 = p[2][1], z2 = p[2][2]
    
var X0 = 0, Y0 = 0
var X1 = Math.sqrt((x1 - x0)*(x1 - x0) + (y1 - y0)*(y1 - y0) + (z1 - z0)*(z1 - z0)),
    Y1 = 0
var X2 = ((x1 - x0) * (x2 - x0) + (y1 - y0) * (y2 - y0) + (z1 - z0) * (z2 - z0)) / X1,
    Y2 = Math.sqrt((x2 - x0)*(x2 - x0) + (y2 - y0)*(y2 - y0) + (z2 - z0)*(z2 - z0) - X2*X2)
return [[X0, Y0], [X1, Y1], [X2, Y2]]
}

function digit(num, scale = 1){
  // look for cached
  c = cachedDig.find(function (dig, index) {
    if((dig.id == num) && (dig.s == scale))
      return true
  })
  
  if (c !== undefined){
    return c.lines
  }

var np = [
[[0,0],[0,16],[8,16],[8,0],[0,0]],
[[0,8],[8,16],[8,0]],
[[0,12],[0,16],[8,16],[8,8],[0,8],[0,0],[8,0]],
[[0,13],[0,16],[8,16],[8,11],[4,8],[8,5],[8,0],[0,0],[0,3]],
[[8,8],[0,8],[6,16],[6,0]],
[[8,16],[0,16],[0,8],[8,8],[8,0],[0,0]],
[[8,16],[0,8],[0,0],[8,0],[8,8],[0,8]],
[[0,16],[8,16],[0,0]],
[[4,9],[1,12],[1,16],[7,16],[7,12],[4,9],[8,7],[8,0],[0,0],[0,7],[4,9]],
[[8,8],[0,8],[0,16],[8,16],[8,0],[0,0]]
]

let r = np[num].map(x => x.map(y => y * scale))

//cachedDig.push({id:num, s:scale, lines: r})
return r
}

module.exports = { main, getParameterDefinitions }
